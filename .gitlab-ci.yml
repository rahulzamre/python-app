stages:
  - build

variables:
  # Base image name using GitLab's Container Registry
  IMAGE_NAME: "$CI_REGISTRY/$CI_PROJECT_PATH"
  DOCKER_BUILDKIT: 1  # Enable BuildKit for efficient builds

# Build Docker image and version it for different environments
build:
  stage: build
  image: docker:20.10.7-git
  services:
    - docker:19.03.12-dind  # Docker-in-Docker service
  
  before_script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - |
      if [ "$CI_COMMIT_REF_NAME" == "dev" ]; then
        git fetch origin dev
        git checkout dev
      elif [ "$CI_COMMIT_REF_NAME" == "preprod" ]; then
        git fetch origin preprod
        git checkout preprod
      elif [ "$CI_COMMIT_REF_NAME" == "prod" ]; then
        git fetch origin production
        git checkout production
      elif [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        git fetch origin main
        git checkout main
      else
        echo "Branch is not one of the predefined environments (dev, preprod, prod, main). Skipping build."
        exit 0  # Skip build for other branches
      fi
    
  script:
    - echo "Building Docker image for $CI_COMMIT_REF_NAME environment..."

    # Tagging strategy based on the branch (dev, preprod, prod, main)
    - |
      if [ "$CI_COMMIT_REF_NAME" == "dev" ]; then
        IMAGE_TAG="dev"
        VERSION_TAG="dev-${CI_COMMIT_SHORT_SHA}"
      elif [ "$CI_COMMIT_REF_NAME" == "preprod" ]; then
        IMAGE_TAG="preprod"
        VERSION_TAG="preprod-${CI_COMMIT_SHORT_SHA}"
      elif [ "$CI_COMMIT_REF_NAME" == "prod" ]; then
        IMAGE_TAG="prod"
        VERSION_TAG="prod-${CI_COMMIT_SHORT_SHA}"
      elif [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        IMAGE_TAG="main"
        VERSION_TAG="main-${CI_COMMIT_SHORT_SHA}"
      else
        echo "Branch is not one of the predefined environments (dev, preprod, prod, main). Skipping build."
        exit 0  # Skip build for other branches
      fi

    # Build the Docker image with the appropriate tag
    - echo "Building Docker image with tag $VERSION_TAG..."
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" -t "$IMAGE_NAME:$VERSION_TAG" .

    # Push the Docker image to GitLab Container Registry
    - echo "Pushing Docker image to GitLab Container Registry..."
    - docker push "$IMAGE_NAME:$IMAGE_TAG"
    - docker push "$IMAGE_NAME:$VERSION_TAG"

  only:
    - dev
    - preprod
    - production
    - main